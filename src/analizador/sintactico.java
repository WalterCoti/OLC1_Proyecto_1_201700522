
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import structs.TErrores;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import structs.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\002\000\002\004\004\000\002\011\011" +
    "\000\002\011\002\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\002\000\002" +
    "\007\007\000\002\007\002\000\002\014\005\000\002\014" +
    "\005\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\005\000\002\005\007\000\002\005\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\006\002\ufffe\013\004\001\002\000\010\004" +
    "\011\005\ufffb\026\ufffb\001\002\000\004\002\000\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\004\005\113\001\002\000\004\010\043\001\002\000\006" +
    "\005\uffe7\026\013\001\002\000\004\006\015\001\002\000" +
    "\004\005\ufffd\001\002\000\022\011\025\013\020\015\017" +
    "\016\023\017\024\020\022\025\026\027\016\001\002\000" +
    "\024\007\uffe0\011\uffe0\013\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\025\uffe0\027\uffe0\001\002\000\022\011\025\013" +
    "\020\015\017\016\023\017\024\020\022\025\026\027\016" +
    "\001\002\000\004\026\037\001\002\000\024\007\uffe1\011" +
    "\uffe1\013\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\025\uffe1" +
    "\027\uffe1\001\002\000\022\011\025\013\020\015\017\016" +
    "\023\017\024\020\022\025\026\027\016\001\002\000\022" +
    "\011\025\013\020\015\017\016\023\017\024\020\022\025" +
    "\026\027\016\001\002\000\022\011\025\013\020\015\017" +
    "\016\023\017\024\020\022\025\026\027\016\001\002\000" +
    "\022\011\025\013\020\015\017\016\023\017\024\020\022" +
    "\025\026\027\016\001\002\000\024\007\uffdf\011\uffdf\013" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\025\uffdf\027\uffdf" +
    "\001\002\000\004\007\030\001\002\000\006\005\uffe7\026" +
    "\013\001\002\000\004\005\uffe8\001\002\000\022\011\025" +
    "\013\020\015\017\016\023\017\024\020\022\025\026\027" +
    "\016\001\002\000\024\007\uffe6\011\uffe6\013\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\025\uffe6\027\uffe6\001\002\000" +
    "\024\007\uffe3\011\uffe3\013\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\025\uffe3\027\uffe3\001\002\000\024\007\uffe2\011" +
    "\uffe2\013\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\025\uffe2" +
    "\027\uffe2\001\002\000\024\007\uffe4\011\uffe4\013\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\025\uffe4\027\uffe4\001\002" +
    "\000\004\014\040\001\002\000\024\007\uffde\011\uffde\013" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\025\uffde\027\uffde" +
    "\001\002\000\022\011\025\013\020\015\017\016\023\017" +
    "\024\020\022\025\026\027\016\001\002\000\024\007\uffe5" +
    "\011\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\025" +
    "\uffe5\027\uffe5\001\002\000\004\026\044\001\002\000\004" +
    "\006\045\001\002\000\016\007\uffe9\012\047\022\053\023" +
    "\052\024\046\027\054\001\002\000\020\007\uffe9\012\047" +
    "\021\111\022\061\023\060\024\055\027\062\001\002\000" +
    "\012\022\103\023\102\024\101\027\104\001\002\000\004" +
    "\007\077\001\002\000\004\007\ufff6\001\002\000\020\007" +
    "\uffe9\012\047\021\075\022\061\023\060\024\055\027\062" +
    "\001\002\000\020\007\uffe9\012\047\021\073\022\061\023" +
    "\060\024\055\027\062\001\002\000\020\007\uffe9\012\047" +
    "\021\056\022\061\023\060\024\055\027\062\001\002\000" +
    "\016\007\uffe9\012\047\022\061\023\060\024\055\027\062" +
    "\001\002\000\012\022\070\023\067\024\065\027\071\001" +
    "\002\000\004\007\uffee\001\002\000\016\007\uffe9\012\047" +
    "\022\061\023\060\024\055\027\062\001\002\000\016\007" +
    "\uffe9\012\047\022\061\023\060\024\055\027\062\001\002" +
    "\000\016\007\uffe9\012\047\022\061\023\060\024\055\027" +
    "\062\001\002\000\004\007\ufff1\001\002\000\004\007\uffef" +
    "\001\002\000\004\007\ufff4\001\002\000\004\007\ufff7\001" +
    "\002\000\004\007\ufff3\001\002\000\004\007\ufff5\001\002" +
    "\000\004\007\ufff2\001\002\000\004\007\ufff0\001\002\000" +
    "\012\022\070\023\067\024\065\027\071\001\002\000\004" +
    "\007\ufffa\001\002\000\012\022\070\023\067\024\065\027" +
    "\071\001\002\000\004\007\ufff8\001\002\000\010\004\011" +
    "\005\ufffb\026\ufffb\001\002\000\006\005\ufffc\026\ufffc\001" +
    "\002\000\016\007\uffe9\012\047\022\061\023\060\024\055" +
    "\027\062\001\002\000\016\007\uffe9\012\047\022\061\023" +
    "\060\024\055\027\062\001\002\000\016\007\uffe9\012\047" +
    "\022\061\023\060\024\055\027\062\001\002\000\016\007" +
    "\uffe9\012\047\022\061\023\060\024\055\027\062\001\002" +
    "\000\004\007\uffea\001\002\000\004\007\uffed\001\002\000" +
    "\004\007\uffeb\001\002\000\004\007\uffec\001\002\000\012" +
    "\022\070\023\067\024\065\027\071\001\002\000\004\007" +
    "\ufff9\001\002\000\004\005\114\001\002\000\006\014\uffdc" +
    "\026\115\001\002\000\004\010\121\001\002\000\004\014" +
    "\117\001\002\000\006\002\ufffe\013\004\001\002\000\004" +
    "\002\uffff\001\002\000\004\027\122\001\002\000\004\007" +
    "\123\001\002\000\006\014\uffdc\026\115\001\002\000\004" +
    "\014\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\006\002\005\003\004\001\001\000\006\004" +
    "\007\011\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\020\014\026\001\001\000\002\001\001\000" +
    "\006\013\020\014\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\020\014\035\001\001\000\006\013" +
    "\020\014\034\001\001\000\006\013\020\014\033\001\001" +
    "\000\006\013\020\014\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\030\001\001\000\002\001\001" +
    "\000\006\013\020\014\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\020\014\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\047\012\050\001\001\000\004\012\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\063\001\001\000\004\012\062\001\001\000" +
    "\004\012\056\001\001\000\004\012\071\001\001\000\004" +
    "\006\065\001\001\000\002\001\001\000\004\012\063\001" +
    "\001\000\004\012\062\001\001\000\004\012\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\073\001\001\000" +
    "\002\001\001\000\004\006\075\001\001\000\002\001\001" +
    "\000\004\011\077\001\001\000\002\001\001\000\004\012" +
    "\107\001\001\000\004\012\106\001\001\000\004\012\105" +
    "\001\001\000\004\012\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\123\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public List<TErrores> LErrSintact = new ArrayList<TErrores>();
    public List<String> validaciones = new ArrayList<String>();
    public Map<String, AFD> Lexpresiones = new HashMap<>();
    public Map<String, String> LConj = new HashMap<>();
    public Map<String, String> conjunto = new HashMap<>();
    
  
    
    /* metodo error sintactico, se puede recuperar. */ 
        public void syntax_error(Symbol s){ 
        String lexema = s.value.toString(); 
        int line = s.right;
        int col = s.left;
        System.out.println("Error Sintactico: "+lexema+" linea: "+ line + " columna " + col);
        TErrores nwLErrRec = new TErrores(lexema,line,col,"Error Sintactico","Error sintactico recuperado \"" + lexema+"\" en la linea "+s.right+" y columna "+s.left );
        LErrSintact.add(nwLErrRec);
    } 

    /* metodo al que se llama ante algun error sintactico  no es posible una recuperación de errores. */
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        String lexema = s.value.toString(); 
        int line = s.right;
        int col = s.left;
        TErrores nwLErrIr = new TErrores(lexema,line,col,"Error Sintactico Irrecuperable","Error sintactico\"" + lexema+"\" en la linea "+line+" y columna "+col );
        LErrSintact.add(nwLErrIr);
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= bloqueGlobal 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloqueGlobal ::= LLAVEL bloqueDef SEPA SEPA bloqueEvaluar LLAVER bloqueGlobal 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("bloqueGlobal",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloqueGlobal ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("bloqueGlobal",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloqueDef ::= defConj expRegulares 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("bloqueDef",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // defConj ::= CONJ DDOT ID ASIGN conjSimb PTCOMA defConj 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		  if(LConj.containsKey(a)){
                                                                    System.out.println("Error el conjunto: >" + a + "< ya existe, intente cambiar el nombre"); 
                                                                }else{
                                                                    LConj.put(a,b);
                                                                    System.out.println("Conjunto: > " + a + " < guardado");
                                                                };
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defConj",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // defConj ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defConj",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // conjSimb ::= NUMB VIRGU conjultimo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c;  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjSimb",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // conjSimb ::= LETRA VIRGU conjultimo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c;  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjSimb",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // conjSimb ::= SIGNO VIRGU conjultimo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c;  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjSimb",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // conjSimb ::= CADENA VIRGU conjultimo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c;  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjSimb",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // conjSimb ::= conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjSimb",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // conjultimo ::= NUMB 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjultimo",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // conjultimo ::= LETRA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjultimo",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // conjultimo ::= SIGNO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjultimo",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // conjultimo ::= CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjultimo",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // conjUnit ::= NUMB conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // conjUnit ::= LETRA conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // conjUnit ::= SIGNO conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // conjUnit ::= CADENA conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // conjUnit ::= COMA NUMB conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // conjUnit ::= COMA LETRA conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // conjUnit ::= COMA SIGNO conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // conjUnit ::= COMA CADENA conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // conjUnit ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expRegulares ::= ID ASIGN expresiones PTCOMA expRegulares 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		NHoja b = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 if(!Lexpresiones.containsKey(a)){
                                                                    Lexpresiones.put(a,new AFD(a,conjunto,new NHoja(".",".",b,new NHoja("#","h",null,null))));
                                                                }else{System.out.println("El id : "+ a +" para el lexema ya existe intente cambiar de nombre");};     ; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expRegulares",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expRegulares ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expRegulares",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresiones ::= DOT expresiones expresiones 
            {
              NHoja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		NHoja b = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		NHoja c = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new NHoja(a,a,b,c);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresiones ::= DISYUN expresiones expresiones 
            {
              NHoja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		NHoja b = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		NHoja c = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new NHoja(a,a,b,c); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresiones ::= POR expresiones 
            {
              NHoja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		NHoja b = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new NHoja(a,a,b,null); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresiones ::= MAS expresiones 
            {
              NHoja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		NHoja b = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new NHoja(a,a,b,null); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresiones ::= SINTER expresiones 
            {
              NHoja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		NHoja b = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new NHoja(a,a,b,null); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresiones ::= expresA 
            {
              NHoja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new NHoja(a,"h",null,null);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresA ::= CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a.substring(1, a.length()-1);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresA",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresA ::= ESPECIAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a.substring(1, a.length()-1);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresA",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresA ::= LLAVEL ID LLAVER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT =b; if(LConj.containsKey(b)){conjunto.put(b,LConj.get(b));}else{System.out.println("El  conjunto >" +b +"< no existe");}
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresA",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bloqueEvaluar ::= ID DDOT CADENA PTCOMA bloqueEvaluar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 if(Lexpresiones.containsKey(a)){System.out.println("Si existe el lexema");}else{System.out.println("No existe el lexema");};
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("bloqueEvaluar",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bloqueEvaluar ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("bloqueEvaluar",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
