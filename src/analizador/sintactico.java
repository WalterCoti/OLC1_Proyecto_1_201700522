
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import structs.TErrores;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import structs.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\002\000\002\004\004\000\002\010\011" +
    "\000\002\010\002\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\002" +
    "\000\002\006\007\000\002\006\002\000\002\013\005\000" +
    "\002\013\005\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\005\000\002\005\007\000\002\005\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\006\002\ufffe\013\004\001\002\000\010\004" +
    "\011\005\ufffb\026\ufffb\001\002\000\004\002\000\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\004\005\102\001\002\000\004\010\043\001\002\000\006" +
    "\005\uffed\026\013\001\002\000\004\006\015\001\002\000" +
    "\004\005\ufffd\001\002\000\022\011\025\013\020\015\017" +
    "\016\023\017\024\020\022\027\016\030\026\001\002\000" +
    "\024\007\uffe6\011\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\027\uffe6\030\uffe6\001\002\000\022\011\025\013" +
    "\020\015\017\016\023\017\024\020\022\027\016\030\026" +
    "\001\002\000\004\026\037\001\002\000\024\007\uffe7\011" +
    "\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\027\uffe7" +
    "\030\uffe7\001\002\000\022\011\025\013\020\015\017\016" +
    "\023\017\024\020\022\027\016\030\026\001\002\000\022" +
    "\011\025\013\020\015\017\016\023\017\024\020\022\027" +
    "\016\030\026\001\002\000\022\011\025\013\020\015\017" +
    "\016\023\017\024\020\022\027\016\030\026\001\002\000" +
    "\022\011\025\013\020\015\017\016\023\017\024\020\022" +
    "\027\016\030\026\001\002\000\024\007\uffe5\011\uffe5\013" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\027\uffe5\030\uffe5" +
    "\001\002\000\004\007\030\001\002\000\006\005\uffed\026" +
    "\013\001\002\000\004\005\uffee\001\002\000\022\011\025" +
    "\013\020\015\017\016\023\017\024\020\022\027\016\030" +
    "\026\001\002\000\024\007\uffec\011\uffec\013\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\027\uffec\030\uffec\001\002\000" +
    "\024\007\uffe9\011\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\027\uffe9\030\uffe9\001\002\000\024\007\uffe8\011" +
    "\uffe8\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\027\uffe8" +
    "\030\uffe8\001\002\000\024\007\uffea\011\uffea\013\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\027\uffea\030\uffea\001\002" +
    "\000\004\014\040\001\002\000\024\007\uffe4\011\uffe4\013" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\027\uffe4\030\uffe4" +
    "\001\002\000\022\011\025\013\020\015\017\016\023\017" +
    "\024\020\022\027\016\030\026\001\002\000\024\007\uffeb" +
    "\011\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\027" +
    "\uffeb\030\uffeb\001\002\000\004\026\044\001\002\000\004" +
    "\006\045\001\002\000\014\007\uffef\012\047\022\053\023" +
    "\052\024\046\001\002\000\016\007\uffef\012\047\021\100" +
    "\022\060\023\057\024\054\001\002\000\012\022\073\023" +
    "\072\024\070\025\071\001\002\000\004\007\066\001\002" +
    "\000\004\007\ufff7\001\002\000\016\007\uffef\012\047\021" +
    "\064\022\060\023\057\024\054\001\002\000\016\007\uffef" +
    "\012\047\021\055\022\060\023\057\024\054\001\002\000" +
    "\014\007\uffef\012\047\022\060\023\057\024\054\001\002" +
    "\000\004\022\062\001\002\000\004\007\ufff6\001\002\000" +
    "\014\007\uffef\012\047\022\060\023\057\024\054\001\002" +
    "\000\014\007\uffef\012\047\022\060\023\057\024\054\001" +
    "\002\000\004\007\ufff4\001\002\000\004\007\ufffa\001\002" +
    "\000\004\007\ufff5\001\002\000\004\023\065\001\002\000" +
    "\004\007\ufff8\001\002\000\010\004\011\005\ufffb\026\ufffb" +
    "\001\002\000\006\005\ufffc\026\ufffc\001\002\000\014\007" +
    "\uffef\012\047\022\060\023\057\024\054\001\002\000\014" +
    "\007\uffef\012\047\022\060\023\057\024\054\001\002\000" +
    "\014\007\uffef\012\047\022\060\023\057\024\054\001\002" +
    "\000\014\007\uffef\012\047\022\060\023\057\024\054\001" +
    "\002\000\004\007\ufff3\001\002\000\004\007\ufff1\001\002" +
    "\000\004\007\ufff0\001\002\000\004\007\ufff2\001\002\000" +
    "\004\024\101\001\002\000\004\007\ufff9\001\002\000\004" +
    "\005\103\001\002\000\006\014\uffe2\026\104\001\002\000" +
    "\004\010\110\001\002\000\004\014\106\001\002\000\006" +
    "\002\ufffe\013\004\001\002\000\004\002\uffff\001\002\000" +
    "\004\027\111\001\002\000\004\007\112\001\002\000\006" +
    "\014\uffe2\026\104\001\002\000\004\014\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\006\002\005\003\004\001\001\000\006\004" +
    "\007\010\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\020\013\026\001\001\000\002\001\001\000" +
    "\006\012\020\013\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\020\013\035\001\001\000\006\012" +
    "\020\013\034\001\001\000\006\012\020\013\033\001\001" +
    "\000\006\012\020\013\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\030\001\001\000\002\001\001" +
    "\000\006\012\020\013\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\020\013\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\047\011\050\001\001\000\004\011\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\060\001\001\000\004\011\055\001\001\000" +
    "\004\011\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\060\001\001\000\004\011\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\066\001\001\000" +
    "\002\001\001\000\004\011\076\001\001\000\004\011\075" +
    "\001\001\000\004\011\074\001\001\000\004\011\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\112" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public List<TErrores> LErrSintact = new ArrayList<TErrores>();
    public List<String> validaciones = new ArrayList<String>();
    public Map<String, AFD> Lexpresiones = new HashMap<>();
    public Map<String, String> LConj = new HashMap<>();
    public Map<String, String> conjunto = new HashMap<>();
    
  
    
    /* metodo error sintactico, se puede recuperar. */ 
        public void syntax_error(Symbol s){ 
        String lexema = s.value.toString(); 
        int line = s.right;
        int col = s.left;
        System.out.println("Error Sintactico: "+lexema+" linea: "+ line + " columna " + col);
        TErrores nwLErrRec = new TErrores(lexema,line,col,"Error Sintactico","Error sintactico recuperado \"" + lexema+"\" en la linea "+s.right+" y columna "+s.left );
        LErrSintact.add(nwLErrRec);
    } 

    /* metodo al que se llama ante algun error sintactico  no es posible una recuperación de errores. */
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        String lexema = s.value.toString(); 
        int line = s.right;
        int col = s.left;
        TErrores nwLErrIr = new TErrores(lexema,line,col,"Error Sintactico Irrecuperable","Error sintactico\"" + lexema+"\" en la linea "+line+" y columna "+col );
        LErrSintact.add(nwLErrIr);
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= bloqueGlobal 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloqueGlobal ::= LLAVEL bloqueDef SEPA SEPA bloqueEvaluar LLAVER bloqueGlobal 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("bloqueGlobal",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloqueGlobal ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("bloqueGlobal",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloqueDef ::= defConj expRegulares 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("bloqueDef",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // defConj ::= CONJ DDOT ID ASIGN conjSimb PTCOMA defConj 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		  if(LConj.containsKey(a)){
                                                                    System.out.println("Error el conjunto: >" + a + "< ya existe, intente cambiar el nombre"); 
                                                                }else{
                                                                    LConj.put(a,b);
                                                                    System.out.println("Conjunto: > " + a + " < guardado");
                                                                };
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defConj",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // defConj ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defConj",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // conjSimb ::= NUMB VIRGU NUMB 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c;  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjSimb",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // conjSimb ::= LETRA VIRGU LETRA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c;  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjSimb",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // conjSimb ::= SIGNO VIRGU SIGNO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c;  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjSimb",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // conjSimb ::= conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjSimb",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // conjUnit ::= NUMB conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // conjUnit ::= LETRA conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // conjUnit ::= SIGNO conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // conjUnit ::= COMA NUMB conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // conjUnit ::= COMA LETRA conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // conjUnit ::= COMA SIGNO conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // conjUnit ::= COMA ESPE conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // conjUnit ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expRegulares ::= ID ASIGN expresiones PTCOMA expRegulares 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		NHoja b = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 if(!Lexpresiones.containsKey(a)){
                                                                    Lexpresiones.put(a,new AFD(a,conjunto,new NHoja(".",".",b,new NHoja("#","h",null,null))));
                                                                }else{System.out.println("El id : "+ a +" para el lexema ya existe intente cambiar de nombre");};     ; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expRegulares",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expRegulares ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expRegulares",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresiones ::= DOT expresiones expresiones 
            {
              NHoja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		NHoja b = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		NHoja c = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new NHoja(a,a,b,c);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresiones ::= DISYUN expresiones expresiones 
            {
              NHoja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		NHoja b = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		NHoja c = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new NHoja(a,a,b,c); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresiones ::= POR expresiones 
            {
              NHoja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		NHoja b = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new NHoja(a,a,b,null); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresiones ::= MAS expresiones 
            {
              NHoja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		NHoja b = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new NHoja(a,a,b,null); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresiones ::= SINTER expresiones 
            {
              NHoja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		NHoja b = (NHoja)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new NHoja(a,a,b,null); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresiones ::= expresA 
            {
              NHoja RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new NHoja(a,"h",null,null);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresA ::= CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresA",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresA ::= ESPECIAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresA",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresA ::= LLAVEL ID LLAVER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT =b; if(LConj.containsKey(b)){conjunto.put(b,LConj.get(b));}else{System.out.println("El  conjunto >" +b +"< no existe");}
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresA",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloqueEvaluar ::= ID DDOT CADENA PTCOMA bloqueEvaluar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 if(Lexpresiones.containsKey(a)){System.out.println("Si existe el lexema");}else{System.out.println("No existe el lexema");};
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("bloqueEvaluar",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloqueEvaluar ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("bloqueEvaluar",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
