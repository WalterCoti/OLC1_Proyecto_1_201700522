
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import structs.TErrores;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\002\000\002\004\004\000\002\010\011" +
    "\000\002\010\002\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\002" +
    "\000\002\006\007\000\002\006\002\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\003\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\006\000\002\014\002\000" +
    "\002\005\007\000\002\005\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\006\002\ufffe\013\004\001\002\000\010\004" +
    "\011\005\ufffb\026\ufffb\001\002\000\004\002\000\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\004\005\113\001\002\000\004\010\054\001\002\000\006" +
    "\005\uffed\026\013\001\002\000\004\006\015\001\002\000" +
    "\004\005\ufffd\001\002\000\034\007\uffdf\011\032\013\020" +
    "\015\017\016\026\017\027\020\023\022\025\023\030\024" +
    "\022\025\021\026\031\027\016\001\002\000\034\007\uffdf" +
    "\011\032\013\020\015\017\016\026\017\027\020\023\022" +
    "\025\023\030\024\022\025\021\026\031\027\016\001\002" +
    "\000\024\007\uffdf\013\020\015\017\022\025\023\030\024" +
    "\022\025\021\026\031\027\016\001\002\000\004\026\047" +
    "\001\002\000\034\007\uffdf\011\032\013\020\015\017\016" +
    "\026\017\027\020\023\022\025\023\030\024\022\025\021" +
    "\026\031\027\016\001\002\000\034\007\uffdf\011\032\013" +
    "\020\015\017\016\026\017\027\020\023\022\025\023\030" +
    "\024\022\025\021\026\031\027\016\001\002\000\024\007" +
    "\uffdf\013\020\015\017\022\025\023\030\024\022\025\021" +
    "\026\031\027\016\001\002\000\004\007\uffe8\001\002\000" +
    "\034\007\uffdf\011\032\013\020\015\017\016\026\017\027" +
    "\020\023\022\025\023\030\024\022\025\021\026\031\027" +
    "\016\001\002\000\024\007\uffdf\013\020\015\017\022\025" +
    "\023\030\024\022\025\021\026\031\027\016\001\002\000" +
    "\024\007\uffdf\013\020\015\017\022\025\023\030\024\022" +
    "\025\021\026\031\027\016\001\002\000\034\007\uffdf\011" +
    "\032\013\020\015\017\016\026\017\027\020\023\022\025" +
    "\023\030\024\022\025\021\026\031\027\016\001\002\000" +
    "\034\007\uffdf\011\032\013\020\015\017\016\026\017\027" +
    "\020\023\022\025\023\030\024\022\025\021\026\031\027" +
    "\016\001\002\000\024\007\uffdf\013\020\015\017\022\025" +
    "\023\030\024\022\025\021\026\031\027\016\001\002\000" +
    "\004\007\034\001\002\000\006\005\uffed\026\013\001\002" +
    "\000\004\005\uffee\001\002\000\004\007\uffec\001\002\000" +
    "\004\007\uffe7\001\002\000\004\007\uffe3\001\002\000\004" +
    "\007\uffeb\001\002\000\004\007\uffea\001\002\000\004\007" +
    "\uffe6\001\002\000\004\007\uffe9\001\002\000\004\007\uffe5" +
    "\001\002\000\004\007\uffe2\001\002\000\004\014\050\001" +
    "\002\000\034\007\uffdf\011\032\013\020\015\017\016\026" +
    "\017\027\020\023\022\025\023\030\024\022\025\021\026" +
    "\031\027\016\001\002\000\004\007\uffe0\001\002\000\004" +
    "\007\uffe1\001\002\000\004\007\uffe4\001\002\000\004\026" +
    "\055\001\002\000\004\006\056\001\002\000\014\007\uffef" +
    "\012\060\022\064\023\063\024\057\001\002\000\016\007" +
    "\uffef\012\060\021\111\022\071\023\070\024\065\001\002" +
    "\000\012\022\104\023\103\024\101\025\102\001\002\000" +
    "\004\007\077\001\002\000\004\007\ufff7\001\002\000\016" +
    "\007\uffef\012\060\021\075\022\071\023\070\024\065\001" +
    "\002\000\016\007\uffef\012\060\021\066\022\071\023\070" +
    "\024\065\001\002\000\014\007\uffef\012\060\022\071\023" +
    "\070\024\065\001\002\000\004\022\073\001\002\000\004" +
    "\007\ufff6\001\002\000\014\007\uffef\012\060\022\071\023" +
    "\070\024\065\001\002\000\014\007\uffef\012\060\022\071" +
    "\023\070\024\065\001\002\000\004\007\ufff4\001\002\000" +
    "\004\007\ufffa\001\002\000\004\007\ufff5\001\002\000\004" +
    "\023\076\001\002\000\004\007\ufff8\001\002\000\010\004" +
    "\011\005\ufffb\026\ufffb\001\002\000\006\005\ufffc\026\ufffc" +
    "\001\002\000\014\007\uffef\012\060\022\071\023\070\024" +
    "\065\001\002\000\014\007\uffef\012\060\022\071\023\070" +
    "\024\065\001\002\000\014\007\uffef\012\060\022\071\023" +
    "\070\024\065\001\002\000\014\007\uffef\012\060\022\071" +
    "\023\070\024\065\001\002\000\004\007\ufff3\001\002\000" +
    "\004\007\ufff1\001\002\000\004\007\ufff0\001\002\000\004" +
    "\007\ufff2\001\002\000\004\024\112\001\002\000\004\007" +
    "\ufff9\001\002\000\004\005\114\001\002\000\006\014\uffdd" +
    "\026\115\001\002\000\004\010\121\001\002\000\004\014" +
    "\117\001\002\000\006\002\ufffe\013\004\001\002\000\004" +
    "\002\uffff\001\002\000\004\027\122\001\002\000\004\007" +
    "\123\001\002\000\006\014\uffdd\026\115\001\002\000\004" +
    "\014\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\006\002\005\003\004\001\001\000\006\004" +
    "\007\010\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\032\014\023\001\001\000\006\013\052\014" +
    "\023\001\001\000\004\014\051\001\001\000\002\001\001" +
    "\000\006\013\045\014\023\001\001\000\006\013\044\014" +
    "\023\001\001\000\004\014\043\001\001\000\002\001\001" +
    "\000\006\013\042\014\023\001\001\000\004\014\041\001" +
    "\001\000\004\014\040\001\001\000\006\013\037\014\023" +
    "\001\001\000\006\013\036\014\023\001\001\000\004\014" +
    "\035\001\001\000\002\001\001\000\004\006\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\050\014\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\060\011\061" +
    "\001\001\000\004\011\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\071\001\001" +
    "\000\004\011\066\001\001\000\004\011\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\071\001\001" +
    "\000\004\011\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\077\001\001\000\002\001\001\000\004\011" +
    "\107\001\001\000\004\011\106\001\001\000\004\011\105" +
    "\001\001\000\004\011\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\123\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public List<TErrores> LErrSintact = new ArrayList();
    
    /* metodo error sintactico, se puede recuperar. */ 
    public void syntax_error(Symbol s){ 
        String lexema = s.value.toString(); 
        int line = s.right;
        int col = s.left;
        System.out.println("Error Sintactico: "+lexema+" linea: "+ line + " columna " + col);
        TErrores nwLErrRec = new TErrores(lexema,line,col,"Error Sintactico","Error sintactico recuperado \"" + lexema+"\" en la linea "+s.right+" y columna "+s.left );
        LErrSintact.add(nwLErrRec);
    } 

    /* metodo al que se llama ante algun error sintactico  no es posible una recuperación de errores. */
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        String lexema = s.value.toString(); 
        int line = s.right;
        int col = s.left;
        
        TErrores nwLErrIr = new TErrores(lexema,line,col,"Error Sintactico","Error sintactico\"" + lexema+"\" en la linea "+line+" y columna "+col );
        LErrSintact.add(nwLErrIr);
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= bloqueGlobal 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloqueGlobal ::= LLAVEL bloqueDef SEPA SEPA bloqueEvaluar LLAVER bloqueGlobal 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("bloqueGlobal",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloqueGlobal ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("bloqueGlobal",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloqueDef ::= defConj expRegulares 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("bloqueDef",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // defConj ::= CONJ DDOT ID ASIGN conjSimb PTCOMA defConj 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 System.out.println("Conjunto: "+a+" con el conjunto " + b); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defConj",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // defConj ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defConj",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // conjSimb ::= NUMB VIRGU NUMB 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c; System.out.println("Sintactico xD: "+a+b+c); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjSimb",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // conjSimb ::= LETRA VIRGU LETRA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c; System.out.println("Sintactico xD: "+a+b+c); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjSimb",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // conjSimb ::= SIGNO VIRGU SIGNO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c; System.out.println("Sintactico xD: "+a+b+c); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjSimb",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // conjSimb ::= conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjSimb",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // conjUnit ::= NUMB conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // conjUnit ::= LETRA conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // conjUnit ::= SIGNO conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // conjUnit ::= COMA NUMB conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // conjUnit ::= COMA LETRA conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // conjUnit ::= COMA SIGNO conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // conjUnit ::= COMA ESPE conjUnit 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b+c; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // conjUnit ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjUnit",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expRegulares ::= ID ASIGN expresiones PTCOMA expRegulares 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 System.out.println("ID: "+a+" expresion :"+b); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expRegulares",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expRegulares ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expRegulares",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresiones ::= DOT expresionM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresiones ::= MAS expresionM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresiones ::= SINTER expresionM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresiones ::= POR expresionM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresiones ::= expresionM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresionM ::= ID expresiones 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresionM",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresionM ::= NUMB expresiones 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresionM",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresionM ::= LETRA expresiones 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresionM",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresionM ::= CADENA expresiones 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresionM",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresionM ::= SIGNO expresiones 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresionM",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresionM ::= ESPE expresiones 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresionM",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresionM ::= DISYUN expresionM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = a+b; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresionM",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresionM ::= LLAVEL ID LLAVER expresiones 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		  RESULT = a+b+c+d; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresionM",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresionM ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresionM",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bloqueEvaluar ::= ID DDOT CADENA PTCOMA bloqueEvaluar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 System.out.println("Id: " +a+" Cadena a evaluar: " + b ); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("bloqueEvaluar",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bloqueEvaluar ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("bloqueEvaluar",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
