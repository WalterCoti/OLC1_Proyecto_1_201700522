package analizador;
import java_cup.runtime.*;
import structs.TErrores;
import java.util.ArrayList;
import java.util.List;

parser code 
{:
    public List<TErrores> LErrSintact = new ArrayList();
    
    /* metodo error sintactico, se puede recuperar. */ 
    public void syntax_error(Symbol s){ 
        String lexema = s.value.toString(); 
        int line = s.right;
        int col = s.left;
        System.out.println("Error Sintactico: "+lexema+" linea: "+ line + " columna " + col);
        TErrores nwLErrRec = new TErrores(lexema,line,col,"Error Sintactico","Error sintactico recuperado \"" + lexema+"\" en la linea "+s.right+" y columna "+s.left );
        LErrSintact.add(nwLErrRec);
    } 

    /* metodo al que se llama ante algun error sintactico  no es posible una recuperaci√≥n de errores. */
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        String lexema = s.value.toString(); 
        int line = s.right;
        int col = s.left;
        
        TErrores nwLErrIr = new TErrores(lexema,line,col,"Error Sintactico Irrecuperable","Error sintactico\"" + lexema+"\" en la linea "+line+" y columna "+col );
        LErrSintact.add(nwLErrIr);
    }  
:} 




terminal String CONJ,SEPA,ASIGN,PTCOMA,DDOT,DOT,COMA,LLAVEL,LLAVER,DISYUN,SINTER,MAS,POR,VIRGU;
terminal String NUMB,SIGNO,LETRA,ESPE,ID,CADENA;
non terminal String inicio,bloqueGlobal,bloqueDef,bloqueEvaluar;
non terminal String expRegulares,conjSimb,defConj,conjUnit,expresiones,expresA,expCompl;

precedence left MAS,POR,DOT,SINTER,DISYUN;

start with inicio; 


inicio::=bloqueGlobal;

bloqueGlobal::= LLAVEL bloqueDef SEPA SEPA bloqueEvaluar LLAVER bloqueGlobal
		|
		;
bloqueDef::= defConj expRegulares;

defConj::=  CONJ DDOT ID:a ASIGN conjSimb:b PTCOMA defConj  {: System.out.println("Conjunto: "+a+" con el conjunto " + b); :}
            |
            ;
conjSimb::= NUMB:a VIRGU:b NUMB:c             {: RESULT = a+b+c; System.out.println("Sintactico xD: "+a+b+c); :}
            |LETRA:a VIRGU:b LETRA:c          {: RESULT = a+b+c; System.out.println("Sintactico xD: "+a+b+c); :}
            |SIGNO:a VIRGU:b SIGNO:c          {: RESULT = a+b+c; System.out.println("Sintactico xD: "+a+b+c); :}
            |conjUnit:a                       {: RESULT = a;:}
            ;

conjUnit::= NUMB:a conjUnit:b                       {: RESULT = a+b; :}
            | LETRA:a conjUnit:b                    {: RESULT = a+b; :}
            | SIGNO:a conjUnit:b                    {: RESULT = a+b; :}
            | COMA:a NUMB:b conjUnit:c              {: RESULT = a+b+c; :}
            | COMA:a LETRA:b conjUnit:c             {: RESULT = a+b+c; :}
            | COMA:a SIGNO:b conjUnit:c             {: RESULT = a+b+c; :}
            | COMA:a ESPE:b conjUnit:c              {: RESULT = a+b+c; :}
            |                                       {: RESULT = ""; :}
            ;

                                           
expRegulares::= ID:a ASIGN expresiones:b PTCOMA expRegulares {: System.out.println("ID: "+a+" expresion :"+b); :}
		|                           
		;

expresiones::= DOT:a  expresA:b expresA:c       {: RESULT = a+b+c; :}
             | DOT:a  expCompl:b expCompl:c     {: RESULT = a+b+c; :}
             | DOT:a  expresA:b expCompl:c      {: RESULT = a+b+c; :}
             | DOT:a  expCompl:b expresA:c      {: RESULT = a+b+c; :}
             | DISYUN:a  expresA:b expresA:c    {: RESULT = a+b+c; :}  
             | DISYUN:a  expCompl:b expCompl:c  {: RESULT = a+b+c; :}
             | DISYUN:a  expCompl:b expresA:c   {: RESULT = a+b+c; :}
             | DISYUN:a  expresA:b expCompl:c   {: RESULT = a+b+c; :}             
             | POR:a expresA:b                  {: RESULT = a+b; :} 
             | POR:a expCompl:b                 {: RESULT = a+b; :}
             | SINTER:a expresA:b               {: RESULT = a+b; :} 
             | SINTER:a expCompl:b              {: RESULT = a+b; :}        
             | MAS:a expresA:b                  {: RESULT = a+b; :}         
             | MAS:a expCompl:b                 {: RESULT = a+b; :}   
             ;


expCompl::=  DOT:a  expresA:b expresA:c       {: RESULT = a+b+c; :}
           | DOT:a  expCompl:b expCompl:c     {: RESULT = a+b+c; :}
           | DOT:a  expresA:b expCompl:c      {: RESULT = a+b+c; :}
           | DOT:a  expCompl:b expresA:c      {: RESULT = a+b+c; :}
           | DISYUN:a  expresA:b expresA:c    {: RESULT = a+b+c; :}  
           | DISYUN:a  expCompl:b expCompl:c  {: RESULT = a+b+c; :}
           | DISYUN:a  expCompl:b expresA:c   {: RESULT = a+b+c; :}
           | DISYUN:a  expresA:b expCompl:c   {: RESULT = a+b+c; :} 
           | POR:a expresA:b                  {: RESULT = a+b; :} 
           | POR:a expCompl:b                 {: RESULT = a+b; :}
           | SINTER:a expresA:b               {: RESULT = a+b; :} 
           | SINTER:a expCompl:b              {: RESULT = a+b; :}        
           | MAS:a expresA:b                  {: RESULT = a+b; :}         
           | MAS:a expCompl:b                 {: RESULT = a+b; :}   
           ;
				

expresA::=   CADENA:a                  {: RESULT = a; :}                          
           | LLAVEL:a ID:b LLAVER:c    {:  RESULT = a+b+c; :} 
           ;

		
bloqueEvaluar::= ID:a DDOT CADENA:b PTCOMA bloqueEvaluar    {: System.out.println("Id: " +a+" Cadena a evaluar: " + b ); :}
		|
		;