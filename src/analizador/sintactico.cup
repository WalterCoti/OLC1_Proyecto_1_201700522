package analizador;
import java_cup.runtime.*;
import structs.TErrores;
import java.util.ArrayList;
import java.util.List;
import structs.NHoja;
import structs.Conjunto;

parser code 
{:
    public List<TErrores> LErrSintact = new ArrayList();
    public List<Conjunto> LConj= new ArrayList();
    
    /* metodo error sintactico, se puede recuperar. */ 
        public void syntax_error(Symbol s){ 
        String lexema = s.value.toString(); 
        int line = s.right;
        int col = s.left;
        System.out.println("Error Sintactico: "+lexema+" linea: "+ line + " columna " + col);
        TErrores nwLErrRec = new TErrores(lexema,line,col,"Error Sintactico","Error sintactico recuperado \"" + lexema+"\" en la linea "+s.right+" y columna "+s.left );
        LErrSintact.add(nwLErrRec);
    } 

    /* metodo al que se llama ante algun error sintactico  no es posible una recuperaci√≥n de errores. */
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        String lexema = s.value.toString(); 
        int line = s.right;
        int col = s.left;
        
        TErrores nwLErrIr = new TErrores(lexema,line,col,"Error Sintactico Irrecuperable","Error sintactico\"" + lexema+"\" en la linea "+line+" y columna "+col );
        LErrSintact.add(nwLErrIr);
    }  
:} 




terminal String CONJ,SEPA,ASIGN,PTCOMA,DDOT,DOT,COMA,LLAVEL,LLAVER,DISYUN,SINTER,MAS,POR,VIRGU;
terminal String NUMB,SIGNO,LETRA,ESPE,ID,CADENA;
non terminal String inicio,bloqueGlobal,bloqueDef,bloqueEvaluar;
non terminal String expRegulares,conjSimb,defConj,conjUnit,expresA;
non terminal NHoja expresiones,expCompl;

precedence left MAS,POR,DOT,SINTER,DISYUN;

start with inicio; 


inicio::=bloqueGlobal;

bloqueGlobal::= LLAVEL bloqueDef SEPA SEPA bloqueEvaluar LLAVER bloqueGlobal
		|
		;
bloqueDef::= defConj expRegulares;

defConj::=  CONJ DDOT ID:a ASIGN conjSimb:b PTCOMA defConj  {: boolean exist=false; 
                                                                for(int i=0;i<LConj.size();i++){
                                                                   if(LConj.get(i).getNameConj() == a){
                                                                        exist=true;
                                                                        break;
                                                                   }
                                                                }
                                                                if(exist){
                                                                
                                                                }else{
                                                                    LConj.add(new Conjunto(a,b));
                                                                };

:}
            |
            ;
conjSimb::= NUMB:a VIRGU:b NUMB:c             {: RESULT = a+b+c; System.out.println("Sintactico xD: "+a+b+c); :}
            |LETRA:a VIRGU:b LETRA:c          {: RESULT = a+b+c; System.out.println("Sintactico xD: "+a+b+c); :}
            |SIGNO:a VIRGU:b SIGNO:c          {: RESULT = a+b+c; System.out.println("Sintactico xD: "+a+b+c); :}
            |conjUnit:a                       {: RESULT = a;:}
            ;

conjUnit::= NUMB:a conjUnit:b                       {: RESULT = a+b; :}
            | LETRA:a conjUnit:b                    {: RESULT = a+b; :}
            | SIGNO:a conjUnit:b                    {: RESULT = a+b; :}
            | COMA:a NUMB:b conjUnit:c              {: RESULT = a+b+c; :}
            | COMA:a LETRA:b conjUnit:c             {: RESULT = a+b+c; :}
            | COMA:a SIGNO:b conjUnit:c             {: RESULT = a+b+c; :}
            | COMA:a ESPE:b conjUnit:c              {: RESULT = a+b+c; :}
            |                                       {: RESULT = ""; :}
            ;

                                           
expRegulares::= ID:a ASIGN expresiones:b PTCOMA expRegulares {:/* RESULT = new NHoja(".",".",b,new NHoja("#","h",null,null));*/ System.out.println("lLEGO AQUI");  :}
		//|                                           {: RESULT = ""; :}         
		;
           
expresiones::=  POR:a expCompl:b                    {: RESULT = new NHoja(a,a,b,null); :}
              | MAS:a expCompl:b                    {: RESULT = new NHoja(a,a,b,null); :}   
              | SINTER:a expCompl:b                 {: RESULT = new NHoja(a,a,b,null); :}  
              | DOT:a  expCompl:b expCompl:c        {: RESULT = new NHoja(a,a,b,c); :}
              | DISYUN:a  expCompl:b expCompl:c     {: RESULT = new NHoja(a,a,b,c); :}
              ;

expCompl::= expresiones:a   {: RESULT = a; :}
          | expresA:a       {: RESULT = new NHoja(a,"h",null,null); :}
          ;
		

expresA::=   CADENA:a                  {: RESULT = a;  :}                          
           | LLAVEL:a ID:b LLAVER:c    {:  RESULT = b; :} 
           ;

		
bloqueEvaluar::= ID:a DDOT CADENA:b PTCOMA bloqueEvaluar    {: System.out.println("Id: " +a+" Cadena a evaluar: " + b ); :}
		|
		;